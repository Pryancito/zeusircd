#!/usr/bin/env bash

# Configure script for ZeusIRCD

#++++++++++++++++
# By @blacknode
#++++++++++++++++

wrong='\033[0;31m'
ok='\033[0;32m'
prompt='\033[0;3m'
endc='\033[0m'


echo -e "********************************************"
echo -e "********************************************"
echo -e "************************ ,--.,---.,----.****"
echo -e "**** ,---. {code}        |  |  Â¬_|  ,--.****"
echo -e "****    / .---.,   .,---.|  |  __,  |   ****"
echo -e "****   /  |---'    | ---.|  |  |\  \'--'****"
echo -e "**** '---'^---'^---''---'^--^--^ ^--^--'****"
echo -e "********************************************"
echo -e "**** { Innovating, Making The World } ******"
echo -e "********************************************"
echo -e "********************************************"
echo " "
echo -e "${ok}Let's go! babe...${endc}"
echo " "

print_ok()
{
	echo -e "checking for $1... ${ok}yes${endc}";
}
print_fail()
{
	echo -e "checking for $1... ${wrong}no${endc} (STOP!)";
	echo -e "\`-> Please install $i now, require for ZeusIRCD and re-run this script.";
	exit
}

print_fail_ext()
{
	echo -e "an error found creating $1 file... ${wrong}(STOP!)${endc}";
	echo -e "\`-> Please, make sure you have necessary privileges to create files.";
	exit
}

print_cpp()
{
	echo -e "\`-> (CPP) found: ${ok}$1${endc}";
}

print_lang()
{
	echo -e "\`-> (LANG) found: ${ok}$1${endc}";
}

os=`uname -s`
arch=`uname -m`
kernel=`uname -r`

MAXUSERS=`ulimit -n`
echo -e "checking for MAXUSERS... " ${ok}${MAXUSERS}${endc}
WORKSPACE=`pwd`
echo -e "checking for workspace environment... " ${ok}${WORKSPACE}${endc}
echo -e "checking for os type..." ${ok}${os}${endc}
echo -e "checking for os architecture..." ${ok}${arch}${endc}
echo -e "checking for kernel typo..." ${ok}${kernel}${endc}

#Goto lang folder

echo "checking for translations... "

cd lang;

#Catching dirs into lang folder

dirs=`ls -d -A *`;

i18n=($dirs);

_pwd=`pwd`;

folders="";

for (( i = 0; i < ${#i18n[*]}; i++ )); do
	src=${i18n[i]};
	print_lang ${src};
	folders=$folders" "${_pwd}"/"${src};
done

if [[ ${#i18n[*]} < 1 ]];
	then
		echo "No folders found? WTF!"
		exit
	else
		echo "${#i18n[*]} folders found."
fi

echo "creating Makefile for translations... "


for (( i = 0; i < ${#i18n[*]}; i++ )); do

	cd ${i18n[i]};

cat>Makefile<<MAKEFILE

#Makefile for '${i18n[i]}' lang.

BUILDER=msgfmt
OBJS=zeus.po
BIN=zeus.mo
DIR=`pwd`
INPUT=\$(DIR)/\$(OBJS)
OUTPUT=\$(DIR)/\$(BIN)

.PHONY: all clean


all: \$(BIN)

\$(BIN):
		@echo \$(DIR)
		@echo "Building \$@ from \$(OBJS), please wait..."
		@\$(BUILDER) \$(INPUT) -o \$(OUTPUT)

clean:
		cd \$(DIR); \\
		rm *.mo; \\
		cd ..;

MAKEFILE

	cd ..

done

cd ..;

#Search for *.cpp sources

echo "checking for sources files... "


cd src;

sources=`ls *.cpp`

cpp=($sources)

objects="";

for (( i = 0; i < ${#cpp[*]}; i++ )); do
	src=${cpp[i]};

	obj=${src/.cpp/.o}

	print_cpp ${src}

	objects=$objects" "$obj

done

if [[ ${#cpp[*]} < 1 ]];
	then
		echo "No sources found? WTF!"
		exit
	else
		echo "${#cpp[*]} sources found"
fi

cd ..;

if [[ ${os} == "FreeBSD" ]];
	then
		CPP="CPP 		= clang++"
		CXXINCS="CXXINCS		= -I../include -I/usr/include/ -I/usr/local/include -I../boost/include -I/usr/local/include/mariadb"
		DIRS="DIRS		= -L/lib -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/local/lib/mariadb"
		echo "#include <boost/config/platform/bsd.hpp>" > include/system.h
elif [[ ${os} == "Darwin" ]];
        then
                CPP="CPP                = g++"
                CXXINCS="CXXINCS                = -D__APPLE__ -I../include -I/usr/include/ -I/usr/local/include  -I/usr/local/opt/openssl/include -I../qpid-proton-0.38.0/cpp/include -I../qpid-proton-0.38.0/c/include -I../boost/include"
                DIRS="DIRS              = -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/local/opt/openssl/lib -L../qpid-proton-0.38.0/build/c/ -L../qpid-proton-0.38.0/build/cpp/"
		echo "#include <boost/config/platform/macos.hpp>" > include/system.h
		echo "#include <sys/socket.h>" >> include/system.h
		echo "#include <netinet/in.h>" >> include/system.h
	else
		CPP="CPP		= g++"
		CXXINCS="CXXINCS		= -I../include -I/usr/include/ -I/usr/local/include -I../boost/include"
		DIRS="DIRS		= -L/lib -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu/"
		echo "#include <boost/config/platform/linux.hpp>" > include/system.h
fi
GCC="GCC 		= gcc"
OBJS="OBJS 		= ${objects}"
LANG_DIR="LANG_DIR	= ${folders}"

compilers_dirs_libs_flags_bin_rm='

LIBS     	= -pthread -lsqlite3 -lssl -lcrypto -lmaxminddb -lmariadb -lqpid-proton -lqpid-proton-cpp -lyaml-cpp -ldl
BIN      	= ../Zeus
CXXFLAGS 	= -g3 -DASIO_STANDALONE -std=c++17 -Wall $(CXXINCS)
RM       	= rm -f
COUNT 		= $(words ${OBJS})
IT		= 0
TOTAL 		= 100
'
more_defs='

.PHONY: all clean

all: info $(BIN)
	@echo "All done!"

clean:
	@echo "Cleaning workspace and translations..."; \
	${RM} $(OBJS) $(BIN); \
	${RM} ../modules/*.so; \
	for langsource in ${LANG_DIR}; do \
		cd $$langsource; \
		$(MAKE) clean; \
		cd ..; \
	done

info:
	@echo "Building ZeusIRCD core, this operation may take several minutes..."

$(BIN): $(OBJS)
	@$(CPP) -g -o $(BIN) $(OBJS) $(DIRS) $(LIBS)

%.o: %.cpp
	$(eval IT=$(shell echo $$(($(IT)+1))))
	$(eval N=$(shell echo $$(( $(IT) * $(TOTAL) / $(COUNT) ))))
	$(eval P=$(shell echo $$(printf "[%3s%s%%]" ${N} )))
	@echo "${P} Building $@ from $<, please wait."
	@$(CPP) $(CXXFLAGS) -c $< -o $@

lang:
	@echo "Building translations, this operation may take several minutes..."
	for langsource in ${LANG_DIR}; do \
		cd $$langsource; \
		$(MAKE); \
		cd ..; \
	done
'

echo "creating Makefile for cpp sources..."


cd src;

cat>Makefile<<MAKEFILE

# Project: ZeusiRCd

${CPP}
${GCC}
${OBJS}
${DIRS}
${LANG_DIR}
${CXXINCS}
${compilers_dirs_libs_flags_bin_rm}
${more_defs}

MAKEFILE


cd ..

#Search for *.cpp modules

echo "checking for modules... "


cd modules;

sources=`ls *.cpp`

cpp=($sources)

objects="";

for (( i = 0; i < ${#cpp[*]}; i++ )); do
        src=${cpp[i]};

        obj=${src/.cpp/.so}

        print_cpp ${src}

        objects=$objects" "$obj

done

if [[ ${#cpp[*]} < 1 ]];
        then
                echo "No modules found? WTF!"
                exit
        else
                echo "${#cpp[*]} sources found"
fi

cd ..;

if [[ ${os} == "FreeBSD" ]];
	then
		CPP="CPP 		= clang++"
		CXXINCS="CXXINCS		= -I../include -I/usr/include/ -I/usr/local/include -I../boost/include -I/usr/local/include/mariadb"
		DIRS="DIRS		= -L/lib -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/local/lib/mariadb"
elif [[ ${os} == "Darwin" ]];
        then
		CPP="CPP                = g++"
                CXXINCS="CXXINCS                = -D__APPLE__ -I../include -I/usr/include/ -I/usr/local/include  -I/usr/local/opt/openssl/include -I../qpid-proton-0.38.0/cpp/include -I../qpid-proton-0.38.0/c/include -I../boost/include"
                DIRS="DIRS              = -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/local/opt/openssl/lib -L../qpid-proton-0.38.0/build/c/ -L../qpid-proton-0.38.0/build/cpp/"
	else
		CPP="CPP		= g++"
		CXXINCS="CXXINCS		= -I../include -I/usr/include/ -I/usr/local/include -I../boost/include"
		DIRS="DIRS		= -L/lib -g3 -L/usr/lib/ -L/usr/local/lib -L/usr/lib/x86_64-linux-gnu/"
fi
GCC="GCC		= gcc"
OBJS="OBJS		= ${objects}"
LANG_DIR="LANG_DIR	= ${folders}"
compilers_dirs_libs_flags_bin_rm='

LIBS		= -pthread -lsqlite3 -lssl -lcrypto -lmaxminddb -lmariadb -lqpid-proton -lqpid-proton-cpp -lyaml-cpp
CXXFLAGS	= -g3 -DASIO_STANDALONE -std=c++17 -fPIC -rdynamic -shared -Wall $(CXXINCS)
RM		= rm -f
COUNT		= $(words ${OBJS})
IT		= 0
TOTAL		= 100
'
more_defs='

.PHONY: all clean

all: info $(OBJS)
	@echo "All done!"

clean:
	@echo "Cleaning workspace and translations..."; \
	${RM} $(OBJS); \
	done

info:
	@echo "Building ZeusIRCD modules, this operation may take several minutes..."

%.so: %.cpp
	$(eval IT=$(shell echo $$(($(IT)+1))))
	$(eval N=$(shell echo $$(( $(IT) * $(TOTAL) / $(COUNT) ))))
	$(eval P=$(shell echo $$(printf "[%3s%s%%]" ${N} )))
	@echo "${P} Building $@ from $<, please wait."
	@$(CPP) $(CXXFLAGS) $< -o $@
'
echo -n "creating Makefile for cpp modules..."


cd modules;

cat>Makefile<<MAKEFILE

# Project: ZeusiRCd

${CPP}
${GCC}
${OBJS}
${DIRS}
${LANG_DIR}
${CXXINCS}
${compilers_dirs_libs_flags_bin_rm}
${more_defs}

MAKEFILE


cd ..;

if [ -e "${WORKSPACE}/src/Makefile" ];

        then
                echo " done."
        else
                echo " no."
                print_fail_ext "Makefile"
fi
touch zeus.db
echo ""
echo -e "All rights! Now run ${ok}make (or gmake)${endc} for build ZeusIRCD. ;)"

cd ..
