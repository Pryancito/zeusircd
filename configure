#!/bin/bash

# Configure script for ZeusIRCD

#++++++++++++++++
# By @blacknode
#++++++++++++++++

wrong='\033[0;31m'
ok='\033[0;32m'
prompt='\033[0;3m'
endc='\033[0m'


echo -e "\033[1;48;5;8m********************************************\033[0m"
echo -e "\033[1;48;5;8m********************************************\033[0m"
echo -e "\033[1;48;5;8m************************ ,--.,---.,----.****\033[0m"
echo -e "\033[1;48;5;8m**** ,---. {code}        |  |  Â¬_|  ,--.****\033[0m"
echo -e "\033[1;48;5;8m****    / .---.,   .,---.|  |  __,  |   ****\033[0m"
echo -e "\033[1;48;5;8m****   /  |---'    | ---.|  |  |\  \'--'****\033[0m"
echo -e "\033[1;48;5;8m**** '---'^---'^---''---'^--^--^ ^--^--'****\033[0m"
echo -e "\033[1;48;5;8m********************************************\033[0m"
echo -e "\033[1;48;5;8m**** { Innovating, Making The World } ******\033[0m"
echo -e "\033[1;48;5;8m********************************************\033[0m"
echo -e "\033[1;48;5;8m********************************************\033[0m"
echo " "
echo -e "Let's go! babe..."
echo " "

print_ok()
{
	echo -e "checking now for $1... yes";
}
print_fail()
{
	echo -e "\033[1;48;5;1m checking now for $1... no (STOP!) \033[0m";
	echo -e "\`-> Please install $i now, require for ZeusIRCD and re-run this script.";
	exit
}

print_fail_ext()
{
	echo -e "\033[1;48;5;1m found error creting $1 file... (STOP!) \033[0m";
	echo -e "\`-> Please, make sure you have necessary privileges to create files.";
	exit
}

print_cpp()
{
	echo -e "\`-> found: $1";
}

os=`uname -s`
arch=`uname -m`
kernel=`uname -r`


LIBS='ssl pthread boost sqlite3 crypto gcc cpp g++ wget microhttpd'

for i in $LIBS; do
	#get path in disk
	run=`whereis $i`

	IFS=' ' read -ra token <<< "$run"

	found=0;


	if [[ ${token[1]} ]]; 
		then
			found=1;
		else
			found=2;
	fi

	case "$found" in
		1) 	print_ok $i;;
		*)  print_fail $i ;;
	esac


done


MAXUSERS=`ulimit -n`
echo "checking for MAXUSERS... " ${MAXUSERS}
WORKSPACE=`pwd`
echo "checking for workspace environment... " ${WORKSPACE}
echo "checking for os type..." ${os}
echo "checking for os architecture..." ${arch}
echo "checking for kernel typo..." ${kernel}

#Search for *.cpp sources

echo -n "checking for sources files.."


cd src;

sources=`ls *.cpp`

cpp=($sources)

objects="";

for (( i = 0; i < ${#cpp[*]}; i++ )); do
	src=${cpp[i]};

	obj=${src/.cpp/.o}

	objects=$objects" "$obj

done

if [[ ${#cpp[*]} < 1 ]]; 
	then
		echo "No sources found? WTF!"
		exit
	else
		echo " ${#cpp[*]} sources found"
fi

cd ..;


CPP="CPP 		= g++"
GCC="GCC 		= gcc"
OBJS="OBJS 		= ${objects}"

compilers_dirs_libs_flags_bin_rm='

DIRS 		= -L/lib -static-libgcc -g3 -L/usr/lib/ -L/usr/local/lib
LIBS     	= -lboost_system -pthread -lsqlite3 -lssl -lcrypto -lboost_thread -lmicrohttpd
CXXINCS  	= -I../include -I/usr/include/ -I/usr/local/include
BIN      	= ../Zeus
CXXFLAGS 	= -g3 -std=c++14 -Wall $(CXXINCS)
RM       	= rm -f

'
more_defs='

.PHONY: all clean

all: info $(BIN)

clean:
	@echo "Cleaning workspace..."
	@${RM} $(OBJS) $(BIN)
	@echo "done."
info:
	@echo "Building ZeusIRCD, this operation may take several minutes..."

$(BIN): $(OBJS)
	@$(CPP) -g -o $(BIN) $(OBJS) $(DIRS) $(LIBS)
	@echo "All done!"

%.o: %.cpp
	@echo "Building $@ from $<, please wait..."
	@$(CPP) $(CXXFLAGS) -c $< -o $@
'

echo -n "creating Makefile file..."


cd src;

cat>Makefile<<MAKEFILE

# Project: ZeusiRCd

${CPP}
${GCC}
${OBJS}
${compilers_dirs_libs_flags_bin_rm}
${more_defs}

MAKEFILE


cd ..;

if [ -e "${WORKSPACE}/src/Makefile" ];

	then
		echo " done."
	else
		echo " no."
		print_fail_ext "Makefile"
fi


